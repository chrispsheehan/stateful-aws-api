name: Deploy Environment

on:
    push:
        branches:
        - main
    workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
  aws_region: ${{ vars.AWS_REGION }}
  aws_role: ${{ vars.AWS_ROLE }}


jobs:
  test:
    runs-on: ubuntu-latest
    env:
      AWS_PAGER: ""
      AWS_ACCESS_KEY_ID: DUMMYIDEXAMPLE
      AWS_SECRET_ACCESS_KEY: DUMMYEXAMPLEKEY
      AWS_REGION: local
      DYNAMODB_TABLE: stateful_aws_api_tasks
      DYNAMODB_ENDPOINT: http://host.docker.internal:8000
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: run db
        run: |
          cp ${GITHUB_WORKSPACE}/.env.example ${GITHUB_WORKSPACE}/.env
          docker run -d -p 8000:8000 amazon/dynamodb-local
          sleep 5
          aws dynamodb list-tables --region local --endpoint-url http://localhost:8000

      - name: create db
        run: |
          aws dynamodb create-table --table-name stateful_aws_api_tasks --region local --endpoint-url http://localhost:8000 --billing-mode PAY_PER_REQUEST --key-schema AttributeName=id,KeyType=HASH --attribute-definitions AttributeName=id,AttributeType=S AttributeName=title,AttributeType=S --global-secondary-indexes "IndexName=IpIndex,KeySchema=[{AttributeName=title,KeyType=HASH}],Projection={ProjectionType=ALL}"

      - name: check
        run: |
          aws dynamodb list-tables --region local --endpoint-url http://localhost:8000

      - name: build app
        run: |
          docker build . -t ci:app

      - name: run app
        run: |
          docker run -d -p 9000:9000 --network host --env-file ${GITHUB_WORKSPACE}/.env ci:app

      - name: test
        run: |
          curl -s -o /dev/null -I -w "%{http_code}" http://localhost:9000/hello 2>/dev/null
          docker logs ci:app
          # BASE_URL=http://localhost:9000 npm run ci:test

  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - uses: extractions/setup-just@v2

  #     - uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #           aws-region: ${{ env.aws_region }}
  #           role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
  #           role-session-name: GitHubActions

  #     - name: build
  #       shell: bash
  #       run: just build
  
  #     - name: tf-apply
  #       shell: bash
  #       run: just tf-apply

  #     - name: tf-set-envs
  #       shell: bash
  #       run: |
  #         cd tf

  #         URL=$(terraform output -raw url)
  #         echo "URL=$URL"
  #         echo "URL=$URL" >> $GITHUB_ENV

  # clean:
  #   if: always()
  #   needs:
  #     - deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - uses: extractions/setup-just@v2

  #     - uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #           aws-region: ${{ env.aws_region }}
  #           role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
  #           role-session-name: GitHubActions
  
  #     - name: destroy
  #       shell: bash
  #       run: just destroy